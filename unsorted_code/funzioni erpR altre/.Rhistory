library(erpR)
data(ERPsets)
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
# nell'oggetto my array stabilisco il numero di righe e di colonne dello scalp
myarray=c(7,5)
# creo un vettore con gli elettrodi e in pià
# - "yaxis", dove voglio mettere l'asse con le ampiezze y
# - "xaxis" dove voglio l'asse col tempo
# - "blank" dove voglio del vuoto.
myelectrodes = c("yaxis", "Fp1", "blank", "Fp2", "legend",
"F7", "F3", "FZ", "F4", "F8", "FT7", "FC3", "FCZ",
"FC4", "FT8", "T3", "C3", "CZ", "C4", "T4", "TP7",
"CP3", "CPZ", "CP4", "TP8", "T5", "P3", "PZ", "P4",
"T6", "xaxis", "O1", "OZ", "O2", "blank")
scalp(list(word), scalp.array=myarray, layout=myelectrodes, ylim=12)
# adesso ne creo uno diverso fatto da quattro elettrodi
# con una colonna bianca in mezzo
myarray2=c(2,3)
myelectrodes2=c("Fp1", "blank", "Fp2", "P3", "blank",  "P4")
scalp(list(word), scalp.array=myarray2, layout=myelectrodes2, ylim=12)
scalp.("Exp1_word_subj", 1:20, ERPsets,  scalp.array=myarray2, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", 1:20, ERPsets,  scalp.array=myarray2, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", 1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray2, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray2, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
source("C:/Users/Mamma/Desktop/nuovi files/R files")
source("C:/Users/Mamma/Desktop/nuovi files/R files/scalp.t.new.R")
scalp.t.new("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
scalp.t.new("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
source("C:/Users/Mamma/Desktop/nuovi files/R files/scalp.t.new.R")
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
source("C:/Users/Mamma/Desktop/nuovi files/R files/mass.t.test.R")
source("C:/Users/Mamma/Desktop/nuovi files/R files/mass.t.test.R")
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
myarray
myelectrodes
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
electrodews
electrodes
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
electrodes
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
myelectrodes
electrodes
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
electrodes
legend.lab
### FUNZIONE PER FARE AVERAGE PER PLOT
#base1 = le prime lettere degli oggetti
#numbers1= il numero dei soggetti di cui calcolare l'average
alldata1=grandaverage(base=base1, numbers1, erplist=erplist1)
alldata2=grandaverage(base=base2,numbers2, erplist=erplist2)
categ=list(alldata1,alldata2)
electrodes
layout
layout
c
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
debug(scalp.t)
undebug(scalp.t)
undebug(scalp.t.new)
undebug(scalp.t)
debug(scalp.t)
scalp.t("Exp1_word_subj", "Exp1_word_subj", numbers=1:20, numbers2=1:20, erplist1=ERPsets, erplist2=ERPsets, scalp.array=myarray, layout=myelectrodes2, ylim=12)
layout
q
layout
?rp.panel
?rp.slider
library(rpanel)
?rpslider
?rp.slider
topoplot.explore <- function(erpobj, myvar=600, startmsec=-200, endmsec=1200, win.ini, win.end, exclude = NULL,
elec.coord=NULL, projection="orthographic", palette.col="jet", palette.steps=10, return.coord = FALSE,
zlim=NULL, interpolation = "cubicspline", extrap = TRUE, interp.points = 500, return.notfound=FALSE, mask = TRUE,  contour=TRUE, x.rev=FALSE,
draw.elec.pos=TRUE,  elec.pos.toplot="all", elec.pos.pch=19, elec.pos.cex=1, draw.nose=FALSE, draw.ears=FALSE, draw.elec.lab=TRUE, elec.lab.adj=c(0.5, NA), elec.lab.cex=1, elec.lab.toplot=elec.pos.toplot, head.col="black", head.lwd=1, ...)
{
# preliminary checks
if (is.null(erpobj)){
stop("an erpobj name must be specified!", call.=F)
}
# la funzione contiene all'interno una funzione che crea il panel. Questa funzione a sua volta contiene la funzione scalp.infl.endo, che Ã¨ quella che effettivamente fa il grafico appoggiandosi alla funzione scalp.endo.
topoplot.explore.panel=function(panel, ...)
{
topoplot(erpobj=erpobj, win.ini = panel$myvar, win.end=800, interp.points=50)
}
panel <- rp.control() #se volessi creare piÃ¹ pannelli allora dovrei aggiungere un'altro panel.
rp.slider(panel, myvar, startmsec, endmsec, action = topoplot.explore.panel, showvalue=T, title="Time", labels="ciao")
rp.do(panel, topoplot.explore.panel)
}
data(ERPsets)
# compute the average of subjects 1 to 20 for the condition
# specified by the string "Exp1_word_subj".
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
word.se = erp.se ("Exp1_word_subj", 1:20, erplist=ERPsets)
myband = erp.se.bands(word, word.se, "FPZ")
library(ggplot2)
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
time = pointstomsec(1:dim(word)[[1]], startmsec=-500, endmsec=1500, lengthsegment = dim(word)[[1]])
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3) +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
library(erpR)
data(ERPsets)
# compute the average of subjects 1 to 20 for the condition
# specified by the string "Exp1_word_subj".
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
word.se = erp.se ("Exp1_word_subj", 1:20, erplist=ERPsets)
myband = erp.se.bands(word, word.se, "FPZ")
library(ggplot2)
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
time = pointstomsec(1:dim(word)[[1]], startmsec=-500, endmsec=1500, lengthsegment = dim(word)[[1]])
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3) +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
library(erpR)
data(ERPsets)
# compute the average of subjects 1 to 20 for the condition
# specified by the string "Exp1_word_subj".
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
word.se = erp.se ("Exp1_word_subj", 1:20, erplist=ERPsets)
myband = erp.se.bands(word, word.se, "FPZ")
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.R")
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.bands.R")
library(erpR)
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.R")
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.bands.R")
data(ERPsets)
# compute the average of subjects 1 to 20 for the condition
# specified by the string "Exp1_word_subj".
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
word.se = erp.se ("Exp1_word_subj", 1:20, erplist=ERPsets)
myband = erp.se.bands(word, word.se, "FPZ")
library(ggplot2)
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
time = pointstomsec(1:dim(word)[[1]], startmsec=-500, endmsec=1500, lengthsegment = dim(word)[[1]])
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3) +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3, col="red") +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3, col="black") +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3, col="darkgray") +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
library(erpR)
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.R")
source("/Users/giorgioarcara/Documents/R files/funzioni erpR altre/erp.se.bands.R")
data(ERPsets)
# compute the average of subjects 1 to 20 for the condition
# specified by the string "Exp1_word_subj".
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
word.se = erp.se ("Exp1_word_subj", 1:20, erplist=ERPsets)
myband = erp.se.bands(word, word.se, "FPZ")
library(ggplot2)
word=grandaverage("Exp1_word_subj", 1:20, erplist=ERPsets)
time = pointstomsec(1:dim(word)[[1]], startmsec=-500, endmsec=1500, lengthsegment = dim(word)[[1]])
ggplot(word, aes(time, FPZ))+
geom_line(size=1)+
#theme_bw()+
geom_ribbon(data = myband, aes(ymin=lower,ymax=upper), alpha=0.3, col="darkgray") +
theme(panel.grid.major=element_line(color="lightgray"),
panel.background = element_blank())
tpairs = function (dat, vars, contr, dep, wid, p.adjust.methods = "none",
paired = FALSE, ...)
{
dat$newfactor = apply(data.frame(dat[, vars]), 1, function(x) {
paste(x, collapse = "_")
})
dat$newfactor = factor(dat$newfactor)
dat = aggregate(dat[, dep], list(dat$newfactor, dat[, wid]),
mean)
names(dat) = c("newfactor", "wid", dep)
contrast.names = NULL
p.values = NULL
t.values = NULL
df = NULL
mean.1 = NULL
mean.2 = NULL
pair=NULL
if (contr[[1]][[1]] == "all") {
combs = combn(levels(dat$newfactor), 2)
contr = list(NULL)
length(contr) = dim(combs)[2]
for (k in 1:dim(combs)[2]) {
contr[[k]] = combs[, k]
}
}
for (i in 1:length(contr)) {
# check within/between
if (paired=="CHECK"){
# check se within o between (if wid are the same)
wid.diff=setdiff(dat[dat$newfactor %in% contr[[i]][[1]], "wid"],dat[dat$newfactor %in% contr[[i]][[2]], "wid"])
wid.check=!length(wid.diff)>0
if (wid.check==TRUE){
res = t.test(dat[dat$newfactor %in% contr[[i]][[1]],
dep], dat[dat$newfactor %in% contr[[i]][[2]], dep],
paired = TRUE, ...)
# aggiorno campo pair
pair=c(pair, TRUE)
}
if (wid.check==FALSE){
res = t.test(dat[dat$newfactor %in% contr[[i]][[1]],
dep], dat[dat$newfactor %in% contr[[i]][[2]], dep],
paired = FALSE, ...)
pair=c(pair, FALSE)
}
}
if (paired==TRUE|paired==FALSE){
res = t.test(dat[dat$newfactor %in% contr[[i]][[1]],
dep], dat[dat$newfactor %in% contr[[i]][[2]], dep],
paired = paired, ...)
pair=c(pair, paired)
}
contrast.names = c(contrast.names, paste(contr[[i]][[1]],
"vs", contr[[i]][[2]], sep = " "))
p.values = c(p.values, res$p.value)
t.values = c(t.values, res$statistic)
df = c(df, res$parameter)
mean.1 = c(mean.1, mean(dat[dat$newfactor %in% contr[[i]][[1]],
dep]))
mean.2 = c(mean.2, mean(dat[dat$newfactor %in% contr[[i]][[2]],
dep]))
}
p.values.corr = signif(p.adjust(p.values, p.adjust.methods),
2)
results = data.frame(contr = contrast.names, p.value = p.values.corr,
t.value = t.values, df = df, mean.1 = mean.1, mean.2, pair)
attr(results, "p.corr") = p.adjust.methods
cat("p values adjustment = ", p.adjust.methods, "\n")
return(results)
}
str_locate_all
